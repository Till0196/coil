// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cnirpc

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CNIClient is the client API for CNI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CNIClient interface {
	Add(ctx context.Context, in *CNIArgs, opts ...grpc.CallOption) (*AddResponse, error)
	Del(ctx context.Context, in *CNIArgs, opts ...grpc.CallOption) (*empty.Empty, error)
	Check(ctx context.Context, in *CNIArgs, opts ...grpc.CallOption) (*empty.Empty, error)
}

type cNIClient struct {
	cc grpc.ClientConnInterface
}

func NewCNIClient(cc grpc.ClientConnInterface) CNIClient {
	return &cNIClient{cc}
}

func (c *cNIClient) Add(ctx context.Context, in *CNIArgs, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/pkg.cnirpc.CNI/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIClient) Del(ctx context.Context, in *CNIArgs, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pkg.cnirpc.CNI/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIClient) Check(ctx context.Context, in *CNIArgs, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pkg.cnirpc.CNI/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CNIServer is the server API for CNI service.
// All implementations must embed UnimplementedCNIServer
// for forward compatibility
type CNIServer interface {
	Add(context.Context, *CNIArgs) (*AddResponse, error)
	Del(context.Context, *CNIArgs) (*empty.Empty, error)
	Check(context.Context, *CNIArgs) (*empty.Empty, error)
	mustEmbedUnimplementedCNIServer()
}

// UnimplementedCNIServer must be embedded to have forward compatible implementations.
type UnimplementedCNIServer struct {
}

func (*UnimplementedCNIServer) Add(context.Context, *CNIArgs) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedCNIServer) Del(context.Context, *CNIArgs) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (*UnimplementedCNIServer) Check(context.Context, *CNIArgs) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (*UnimplementedCNIServer) mustEmbedUnimplementedCNIServer() {}

func RegisterCNIServer(s *grpc.Server, srv CNIServer) {
	s.RegisterService(&_CNI_serviceDesc, srv)
}

func _CNI_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CNIArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.cnirpc.CNI/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIServer).Add(ctx, req.(*CNIArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNI_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CNIArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.cnirpc.CNI/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIServer).Del(ctx, req.(*CNIArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNI_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CNIArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.cnirpc.CNI/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIServer).Check(ctx, req.(*CNIArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _CNI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pkg.cnirpc.CNI",
	HandlerType: (*CNIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _CNI_Add_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _CNI_Del_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _CNI_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/cnirpc/cni.proto",
}
