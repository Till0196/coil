version: 2.1
commands:
  run-mtest:
    description: "multi-host test"
    parameters:
      runtime:
        type: string
      suite:
        type: string
      kubernetes-version:
        type: string
    steps:
      - run:
          name: Store Service Account
          command: |
            echo $GCLOUD_SERVICE_ACCOUNT > account.json
            gcloud auth activate-service-account --key-file=account.json
      - run:
          command: |
            ./bin/run-mtest.sh <<parameters.runtime>> <<parameters.suite>> <<parameters.kubernetes-version>>
          no_output_timeout: 20m
      - run:
          name: Set the instance lifetime to 10 minutes
          command: |
            . ./bin/env
            $GCLOUD compute instances add-metadata ${INSTANCE_NAME} --zone ${ZONE} \
              --metadata shutdown-at=$(date -Iseconds -d+10minutes)
          when: on_fail
      - run:
          name: Notify to Slack
          command: |
            . ./bin/env
            curl -X POST -H 'Content-type: application/json' --data "{
              \"blocks\": [
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"Failed: ${CIRCLE_USERNAME}'s workflow (${CIRCLE_JOB}) in <https://circleci.com/gh/${CIRCLE_PROJECT_USERNAME}/workflows/${CIRCLE_PROJECT_REPONAME}|${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}> (<https://circleci.com/gh/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/tree/${CIRCLE_BRANCH}|${CIRCLE_BRANCH}>)\n Do you extend the lifetime of ${INSTANCE_NAME}?\"
                  },
                  \"accessory\": {
                    \"type\": \"button\",
                    \"text\": {
                      \"type\": \"plain_text\",
                      \"text\": \"Extend\",
                      \"emoji\": true
                    },
                    \"value\": \"${INSTANCE_NAME}\"
                  }
                }
              ]
            }" $SLACK_WEBHOOK_URL
          when: on_fail

jobs:
  build:
    docker:
    - image: quay.io/cybozu/golang:1.13-bionic
    - image: quay.io/coreos/etcd:v3.3
    working_directory: /work
    steps:
    - checkout
    - run: make test
    - run: GOBIN=/tmp/workspace CGO_ENABLED=0 GOLDFLAGS="-w -s" go install -mod=vendor ./pkg/hypercoil
    - run: cp LICENSE /tmp/workspace
    - persist_to_workspace:
       root: /tmp/workspace
       paths:
         - hypercoil
         - LICENSE
  build-image:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Copy files
          command: |
            cp /tmp/workspace/hypercoil docker
            cp /tmp/workspace/LICENSE docker
      - setup_remote_docker
      - run:
          name: Build image
          command: |
            docker build -t quay.io/cybozu/coil:latest ./docker
      - run:
          name: Save image
          command: |
            mkdir -p /tmp/docker
            docker save quay.io/cybozu/coil:latest -o /tmp/docker/image
      - persist_to_workspace:
          root: /tmp/docker
          paths:
            - image
  push-image:
    docker:
      - image: docker:stable
    steps:
      - attach_workspace:
          at: /tmp/docker
      - setup_remote_docker
      - run: docker load -i /tmp/docker/image
      - run:
          name: Push docker image to Quay.io
          command: |
            docker login -u $QUAY_USER -p $QUAY_PASSWORD quay.io
            echo "pushing Coil image ..."
            TAG=$(echo $CIRCLE_TAG | cut -c 2-)
            docker tag quay.io/cybozu/coil:latest quay.io/cybozu/coil:$TAG
            docker push quay.io/cybozu/coil:$TAG
            if echo $TAG | grep -q -e - ; then
                echo ===== Skip pushing branch tags for pre-release $TAG =====
                exit 0
            fi
            BRANCH=$(echo $TAG | cut -d "." -f 1-2)
            docker tag quay.io/cybozu/coil:latest quay.io/cybozu/coil:$BRANCH
            docker push quay.io/cybozu/coil:$BRANCH
  mtest-containerd:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run-mtest:
          runtime: remote
          suite: ./functions
          kubernetes-version: "1.17"
  mtest-docker:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run-mtest:
          runtime: docker
          suite: ./functions
          kubernetes-version: "1.17"
  mtest-failures:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run-mtest:
          runtime: remote
          suite: ./failures
          kubernetes-version: "1.17"
  mtest-k8s-v1_16:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run-mtest:
          runtime: remote
          suite: ./functions
          kubernetes-version: "1.16"
  mtest-k8s-v1_15:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run-mtest:
          runtime: remote
          suite: ./functions
          kubernetes-version: "1.15"

workflows:
  version: 2
  main:
    jobs:
      - build
      - build-image:
          requires:
            - build
      - mtest-containerd
      - mtest-docker
      - mtest-failures
      - mtest-k8s-v1_16
      - mtest-k8s-v1_15
  release:
    jobs:
      - build:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - build-image:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - push-image:
          requires:
            - build-image
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
